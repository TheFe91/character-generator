<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * StatsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatsRepository extends EntityRepository
{
    public function getModifier(int $id, string $stat): int
    {
        $orvGetter = 'get' . ucfirst($stat);
        $tmpGetter = "{$orvGetter}Temp";
        $originalValue = $this->find($id)->{$orvGetter}();
        $tempValue = $this->find($id)->{$tmpGetter}();
        return (int) floor((($originalValue + $tempValue) - 10) / 2);
    }

    public function getAC(int $id) : int
    {
        $stat = $this->find($id);
        $armor_bonus = $stat->getArmorBonus();
        $shieldBonus = $stat->getShieldBonus();
        $dexModifier = self::getModifier($id, 'dexterity');
        $sizeModifier = $stat->getSizeModifier();
        $naturalArmor = $stat->getNaturalArmor();
        $deflectionModifier = $stat->getDeflectionModifier();
        $acMiscModifier = $stat->getAcMiscModifier();
        return $armor_bonus + $shieldBonus + $dexModifier + $sizeModifier + $naturalArmor + $deflectionModifier + $acMiscModifier;
    }

    public function getInitiative(int $id) : int
    {
        $stat = $this->find($id);
        $dexModifier = self::getModifier($id, 'dexterity');
        $initiativeMiscModifier = $stat->getInitiativeMiscModifier();
        return $dexModifier + $initiativeMiscModifier;
    }

    public function getSavingThrow(int $id, string $savingThrow) : int
    {
        $stat = $this->find($id);
        $abilityModifier = self::getModifier($id,
            $savingThrow === 'fortitude'
                ? 'constitution'
                : $savingThrow === 'reflex'
                    ? 'dexterity'
                    : 'wisdom'
        );

        $baseSaveGetter = "get{$savingThrow}BaseSave";
        $baseSave = $stat->{$baseSaveGetter}();

        $magicSaveGetter = "get{$savingThrow}MagicModifier";
        $magicModifier = $stat->{$magicSaveGetter}();

        $miscSaveGetter = "get{$savingThrow}MiscModifier";
        $miscModifier = $stat->{$miscSaveGetter}();

        $tempSaveGetter = "get{$savingThrow}TempModifier";
        $tempModifier = $stat->{$tempSaveGetter}();

        return $baseSave + $abilityModifier + $magicModifier + $miscModifier + $tempModifier;
    }

    public function getGrapple(int $id, bool $useDex = false) : array
    {
        $stat = $this->find($id);
        $babs = $stat->getBaseAttackBonus();

        $return = array();

        foreach ($babs as $bab) {
            $abilityModifier = self::getModifier($id, $useDex ? 'dexterity' : 'strength');
            $sizeModifier = $stat->getSizeModifier();
            $miscModifier = $stat->getGrappleMiscModifier();
            $grapple = $bab + $abilityModifier + $sizeModifier + $miscModifier;
            $return[] = $grapple;
        }

        return $return;
    }
}
